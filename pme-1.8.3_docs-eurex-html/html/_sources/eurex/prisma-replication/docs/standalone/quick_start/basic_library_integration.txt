=========================
Basic Library Integration
=========================

Margin Environment Lifecycle
============================

The ``MarginEnvironment`` holds key references to all data holders.
This means that this object can be allowed
to fall out of scope and its data garbage collected.
This is key when working with multiple days of market data, where
it may be impossible to hold all necessary data for a batch run in heap at one
time.

However, because the Eurex Clearing PME was designed to make maximum use of
modern multi-core and multi-CPU computers, it maintains execution threads so
that all operations run in parallel, in a standard Java ``ExecutorService``.
This can be provided by your application, or created automatically by
the PME.

Please follow the instructions in the
:doc:`Concurrency Guide <../integration/concurrency>` and use an external
``ExecutorService`` if your application creates multiple ``MarginEnvironment``
instances (see :doc:`../../common/overview/known_limitations`\ ).
If your application creates one
``MarginEnvironment`` for the lifecycle of your application, this is not
necessary.

For more information on performing multi-day analysis, see
:doc:`Common Use Cases <../integration/common_tasks>` .

For an overview of the system architecture, see :ref:`architecture`.


Data Lifecycle
==============

When integrating the PME, there will be three distinct sets of data.

Market, Simulation, and Reference Data is stored internally by the
``MarginEnvironment`` and its helper classes (such as ``MarginData``).
Once you have provided this data to the ``MarginEnvironment`` you no longer
need to manage it. This means you can load the data once and then run multiple
portfolios across multiple calculations.
However, if you are running over many days consecutively, you will need to allow the
``MarginEnvironment`` to fall out of scope between valuation dates,
to allow this memory to be reclaimed by garbage collected.

Input data that you provide (portfolios, trades, and ETD positions) are only
used transiently by the ``MarginCalculator`` during a particular calculation.
Your code must manage the lifecycle of this data, which is not held by the
PME after a particular calculation is complete.

Results generated by a call to a ``MarginCalculator`` are generated by the PME
but no references are held to it. Your code is responsible for managing it,
and it is available to the garbage collector as soon as all references you
hold to it pass out of scope.

Third-Party Libraries
=====================

Like any example of modern Java software, the Eurex Clearing PME utilizes
a significant number of third-party Open Source libraries (including the
OpenGamma Platform, the core of the library). While the majority of those are
used for implementation only and thus only of concern from a development environment
and packaging perspective, there are several that are exposed directly in the
API that you use to integrate the PME into your applications.

The Eurex PME uses `ThreeTen <http://www.threeten.org/>`_ for all date and time
calculations. ThreeTen is a back-port and reference implementation of
JSR-310, which is the new date and time implementation in Java 8. It was
designed and developed by Stephen Colebourne, the author of Joda-Time (used
in many financial services firms), who is also an OpenGamma employee. In a
future release of the Eurex Clearing PME, when we discontinue support for
Java 7, we will no longer have a need to use ThreeTen.

The Eurex PME also makes extensive use of `Guava <https://github.com/google/guava>`_
and you will note that most of the collections you interact with when programming
against the library are actually Guava collections rather than the built-in
native Java ones.

Finally, for most "POJO" implementations (where Java classes are used purely
as structured data representations) we make extensive use of
`Joda-Beans <http://www.joda.org/joda-beans/>`_ , also by Stephen Colebourne
and sponsored by OpenGamma. While you can broadly ignore that we are using
Joda-Beans, it ensures that all data structures you work with behave in
a consistent way and all Builders are consistent in their operation.

If you are developing a new application to use the PME, we highly recommend
that you evaluate these libraries as it will make your integration and maintenance
easy going forward, particularly for dates and times.

See :doc:`Third Party Dependencies <../advanced/third_party_dependencies>` for a complete listing with license info.
